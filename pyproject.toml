[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "f1-predict"
version = "0.1.0"
authors = [
    {name = "Julien Pequegnot", email = "your.email@example.com"},
]
description = "A machine learning project for predicting Formula 1 race outcomes"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["formula1", "f1", "machine-learning", "prediction", "sports-analytics"]

# Core dependencies
dependencies = [
    # Core data science libraries
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",

    # Data visualization
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",

    # Machine learning
    "xgboost>=1.7.0",
    "lightgbm>=4.0.0",
    "shap>=0.43.0",

    # Web scraping and APIs
    "requests>=2.31.0",
    "beautifulsoup4>=4.12.0",

    # Environment management
    "python-dotenv>=1.0.0",

    # Structured logging
    "structlog>=23.1.0",

    # Data validation
    "pydantic>=2.0.0",
    "pandera>=0.17.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",  # Parallel test execution

    # Code quality
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "bandit>=1.7.0",  # Security linting

    # Pre-commit hooks
    "pre-commit>=3.3.0",

    # Development tools
    "ipython>=8.14.0",
    "memory-profiler>=0.61.0",

    # Documentation
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
]

# Jupyter notebook dependencies
jupyter = [
    "jupyter>=1.0.0",
    "ipykernel>=6.25.0",
    "nbqa>=1.7.0",  # Notebook quality assurance
    "nbstripout>=0.6.0",  # Remove notebook output from git
]

# ML experiment tracking
mlops = [
    "mlflow>=2.7.0",
    "optuna>=3.3.0",
    "wandb>=0.15.0",
]

# Performance monitoring
profiling = [
    "py-spy>=0.3.0",
    "line-profiler>=4.0.0",
    "memory-profiler>=0.61.0",
]

[project.urls]
"Homepage" = "https://github.com/jpequegn/f1-predict"
"Bug Reports" = "https://github.com/jpequegn/f1-predict/issues"
"Source" = "https://github.com/jpequegn/f1-predict"
"Documentation" = "https://github.com/jpequegn/f1-predict#readme"

[project.scripts]
f1-predict = "f1_predict.cli:main"

# Tool configurations

[tool.ruff]
# Set the maximum line length to 88 (same as Black)
line-length = 88
target-version = "py39"

[tool.ruff.lint]
# Enable specific rule sets
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "C90", # mccabe complexity
    "N",   # pep8-naming
    "D",   # pydocstyle
    "S",   # bandit security
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "DTZ", # flake8-datetimez
    "PL",  # pylint
]

# Ignore specific rules
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D203", # 1 blank line required before class docstring
    "D213", # Multi-line docstring summary should start at the second line
    "S101", # Use of assert (common in tests)
    "PLR0913", # Too many arguments to function call
]

# Exclude files/directories from linting
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "data",  # Exclude data directory
    "*.ipynb",  # Jupyter notebooks handled separately
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101", "D", "PLR2004", "E501", "E712"]  # Allow assert, missing docstrings, magic values, long lines, and boolean comparisons in tests
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"scripts/**/*" = ["T20", "C901", "PLR0912", "PLR0915", "PLR2004"]  # Allow print statements and complexity in scripts
"src/f1_predict/cli.py" = ["T201", "PLR2004", "E501", "PLR1714"]  # Allow prints, magic values, long lines, and comparison merging in CLI
"src/f1_predict/data/cleaning.py" = ["E501", "F402", "ARG002", "DTZ007", "DTZ005", "PLR0911", "PLR2004", "SIM102"]  # Allow long lines, shadowed imports, unused args, naive datetime, many returns, magic values, nested ifs
"src/f1_predict/data/collector.py" = ["E501", "PLR0915", "DTZ005", "DTZ006"]  # Allow long lines, many statements, and naive datetime
"src/f1_predict/data/models.py" = ["DTZ007"]  # Allow naive datetime in models
"src/f1_predict/logging_config.py" = ["ARG001"]  # Allow unused arguments in logging config

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["f1_predict"]
force-sort-within-sections = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/f1_predict",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "-ra",  # Show all test session info
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "ml: marks tests related to machine learning models",
    "data: marks tests related to data processing",
    "api: marks tests related to API functionality",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/conftest.py",
    "*/setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
ignore_missing_imports = true

# Per-module options
[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = [
    "pandas.*",
    "numpy.*",
    "sklearn.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "xgboost.*",
    "lightgbm.*",
    "optuna.*",
    "mlflow.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "data"]
skips = ["B101", "B601"]  # Skip assert and shell injection tests in dev environment

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | data
)/
'''